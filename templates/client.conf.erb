<%-
require 'ipaddr'
-%>
# Originally /usr/share/doc/packages/openvpn/sample-config-files/tls-home.conf

# General Parameters

# Verbosity. 0=fatal only, 1=startup + nonfatal errs, 2 = cert + crypto names,
# 3=TLS debug stuff, up to 11.
verb 1
mute 10
script-security 2
<%- if @user -%>

user <%= @user %>
<%-   if @group -%>
group <%= @group %>
<%-   end -%>
<%- end -%>

# Lock key and buffers in memory, keeping them out of the swap file.
mlock

# Use a dynamic tun device.  (Could also be tap, for ether bridging.)
dev <%= @device %>
<%- if @mtu_discovery -%>

# MTU for tunnel (outer) packets.  Over-conservative default 1300, recommended
# is (link_mtu - 28) deducting the UDP header, i.e. 1472 for a standard link 
# of MTU = 1500.  The default seems to work OK in v2.0.
# link-mtu 1472

# Path MTU discovery, should DF (don't fragment) be set? no, maybe, yes.
# "maybe" uses per-route heuristics to decide.
mtu-disc maybe

# Empirically verify the MTU.  Results logged after about 3 minutes.
# Requires equivalent support on the other end.
mtu-test
<%- end -%>
<%- if @ping and @ping_restart -%>

# Send pings to keep conntracks alive and detect a dead peer, only if connected.
keepalive <%= @ping %> <%= @ping_restart %>
ping-timer-rem
<%- end -%>

# Crypto Parameters (must match the peer, can't push them)

# HMAC algorithm (anti-tampering checksum)
auth <%= @hmac_algorithm %>
<%- if @tls_auth_source or @tls_auth_content -%>

# HMAC hardening
tls-auth <%= @ssl_dir %>/tls-auth.key
<%- end -%>

# Cryptographic cipher on main data channel
cipher <%= @_cipher %>

comp-lzo

# TLS Parameters
<%- if @_tls_cipher -%>

# Allowable TLS ciphers
tls-cipher <%= @_tls_cipher %>
<%- end -%>
<%- if @remote_cert_tls -%>

remote-cert-tls server
<%- end -%>

<%- if @persist_key -%>
persist-key
<%- end -%>
<%- if @persist_tun -%>
persist-tun
<%- end -%>
<%- if @persist_local_ip -%>
persist-local-ip
<%- end -%>
<%- if @persist_remote_ip -%>
persist-remote-ip
<%- end -%>

# Polarity of this host (tls-client or tls-server)
tls-client

nobind

<%- @connections.each do |connection|
      protocol = connection['protocol']
      protocol ||= 'udp'
      protocol = "#{protocol}-client" if protocol === 'tcp' -%>
<connection>
remote <%= connection['remote'] %>
port <%= connection['port'] || '1194' %>
proto <%= protocol %>
<%-   if connection.include?('socks-proxy') -%>

# SOCKS proxy
socks-proxy <%= connection['socks-proxy'] %> <%= connection['socks-port'] || '1080' %> <%= connection['socks-authfile'] || '' %>
<%-   end -%>
</connection>
<%- end
    if @address
      (ip, prefixlen) = @address.split /\// -%>

# (Don't) configure local <-> remote IP addresses of tunnel.  Get from server.
ifconfig <%= "#{ip} #{IPAddr.new('255.255.255.255').mask(prefixlen).to_s}" %>
<%- else -%>

# Accept configuration overrides from the server.
pull
<%- end -%>

# How to validate the server certificate
<%- if @server_dn -%>
verify-x509-name '<%= @server_dn %>' <%= @_x509_name_type %>
<%- end -%>
